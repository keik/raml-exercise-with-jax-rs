<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
The base of this file are copied from the jboss-eap-quickstarts helloworld-rs example
(https://github.com/jboss-developer/jboss-eap-quickstarts/blob/7.0.x-develop/helloworld-rs/pom.xml)
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>info.keik.exercises</groupId>
  <artifactId>raml_exercise</artifactId>
  <version>0.0.0</version>
  <packaging>war</packaging>
  <name>RAML exercise</name>
  <description>A exercise for RAML with JAX-RS</description>

  <!-- Activate JBoss Product Maven repository.

NOTE: Configuring the Maven repository in the pom.xml file is not a recommended procedure
and is only done here to make it easier to use the quickstarts.

For more information about how to configure Maven for your application,
see the section entitled 'Use the Maven Repository'
in the Development Guide for Red Hat JBoss Enterprise Application Platform located here:

https://access.redhat.com/documentation/en-US/JBoss_Enterprise_Application_Platform/
  -->
  <repositories>
    <repository>
      <id>jboss-developer-staging-repository</id>
      <url>http://jboss-developer.github.io/temp-maven-repo/</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
    </repository>
    <repository>
      <id>redhat-ga-repository</id>
      <url>https://maven.repository.redhat.com/earlyaccess/all/</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
    </repository>
  </repositories>

  <pluginRepositories>
    <pluginRepository>
      <id>jboss-developer-staging-repository</id>
      <url>http://jboss-developer.github.io/temp-maven-repo/</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
    </pluginRepository>
    <pluginRepository>
      <id>redhat-ga-repository</id>
      <url>https://maven.repository.redhat.com/earlyaccess/all/</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
    </pluginRepository>
  </pluginRepositories>

  <properties>
    <!-- Explicitly declaring the source encoding eliminates the following message: -->
    <!-- [WARNING] Using platform encoding (UTF-8 actually) to copy filtered
         resources, i.e. build is platform dependent! -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    <!-- JBoss dependency versions -->

    <version.wildfly.maven.plugin>1.0.2.Final</version.wildfly.maven.plugin>

    <version.jboss.spec.javaee.7.0>1.0.3.Final</version.jboss.spec.javaee.7.0>

    <!-- other plug-in versions -->
    <version.war.plugin>2.1.1</version.war.plugin>

    <!-- maven-compiler-plugin -->
    <maven.compiler.target>1.8</maven.compiler.target>
    <maven.compiler.source>1.8</maven.compiler.source>
  </properties>

  <dependencyManagement>
    <dependencies>
      <!-- Define the version of the JBoss Java EE APIs we want to import.
           Any dependencies from org.jboss.spec will have their version defined by this
           BOM -->
      <!-- JBoss distributes a complete set of Java EE APIs including
           a Bill of Materials (BOM). A BOM specifies the versions of a "stack" (or
           a collection) of artifacts. We use this here so that we always get the correct
           versions of artifacts. Here we use the jboss-javaee-7.0 stack (you can
           read this as the JBoss stack of the Java EE APIs). You can actually
           use this stack with any version of JBoss EAP that implements Java EE. -->
      <dependency>
        <groupId>org.jboss.spec</groupId>
        <artifactId>jboss-javaee-7.0</artifactId>
        <version>${version.jboss.spec.javaee.7.0}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>

    <!-- Import the CDI API, we use provided scope as the API is included in JBoss EAP -->
    <dependency>
      <groupId>javax.enterprise</groupId>
      <artifactId>cdi-api</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- Import the Common Annotations API (JSR-250), we use provided scope
         as the API is included in JBoss EAP -->
    <dependency>
      <groupId>org.jboss.spec.javax.annotation</groupId>
      <artifactId>jboss-annotations-api_1.2_spec</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- Import the JAX-RS API, we use provided scope as the API is included in JBoss EAP -->
    <dependency>
      <groupId>org.jboss.spec.javax.ws.rs</groupId>
      <artifactId>jboss-jaxrs-api_2.0_spec</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
	    <groupId>javax.validation</groupId>
	    <artifactId>validation-api</artifactId>
	    <version>1.1.0.Final</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.jaxrs</groupId>
      <artifactId>jackson-jaxrs-json-provider</artifactId>
      <version>2.2.3</version>
    </dependency>

  </dependencies>

  <build>
    <!-- Set the name of the WAR, used as the context root when the app
         is deployed -->
    <finalName>${project.artifactId}</finalName>
    <plugins>
      <plugin>
        <artifactId>maven-war-plugin</artifactId>
        <version>${version.war.plugin}</version>
        <configuration>
          <!-- Java EE doesn't require web.xml, Maven needs to catch up! -->
          <failOnMissingWebXml>false</failOnMissingWebXml>
        </configuration>
      </plugin>
      <!-- WildFly plug-in to deploy the WAR -->
      <plugin>
        <groupId>org.wildfly.plugins</groupId>
        <artifactId>wildfly-maven-plugin</artifactId>
        <version>${version.wildfly.maven.plugin}</version>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <!-- When built in OpenShift the 'openshift' profile will be used when invoking mvn. -->
      <!-- Use this profile for any OpenShift specific customization your app will need. -->
      <!-- By default that is to put the resulting archive into the 'deployments' folder. -->
      <!-- http://maven.apache.org/guides/mini/guide-building-for-different-environments.html -->
      <id>openshift</id>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-war-plugin</artifactId>
            <version>${version.war.plugin}</version>
            <configuration>
              <outputDirectory>deployments</outputDirectory>
              <warName>ROOT</warName>
              <!-- Java EE doesn't require web.xml, Maven needs to catch up! -->
              <failOnMissingWebXml>false</failOnMissingWebXml>
            </configuration>
          </plugin>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>build-helper-maven-plugin</artifactId>
            <executions>
              <execution>
                <phase>generate-sources</phase>
                <goals>
                <goal>add-source</goal>
                </goals>
                <configuration>
                  <sources>
                    <source>src/gen/java</source>
                  </sources>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
